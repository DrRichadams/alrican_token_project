import React, { useState } from 'react';
import styled from 'styled-components';
import { colors } from '../../constants/colors';
import { UserAuth } from '../../contexts/AuthContext';
import { TiWarning } from "react-icons/ti";
import { Navigate } from 'react-router-dom';


const CircleDetailer = ({tc, usd}) => {
  return(
      <CircleDetailerContainer>
        <Label>Available</Label>
        <Value>{tc} TC</Value>
        <Value>USD ${usd}</Value>
      </CircleDetailerContainer>
  )
}

const WholeWallet = ({active, type, proceedFunc, updateAddress, updateWalletType}) => {
  const [walletAddress, setwalletAddress] = useState('');

  const handleChange = (e) => {
    setwalletAddress(e.target.value)
  }

  const handleRequest = () => {
    updateAddress(walletAddress);
    updateWalletType(type);
    proceedFunc()
  }
  
  return(
    <WalletProvider display={active ? "flex":"none"}>
      <WalletInput>
        <ProviderLabel>Wallet address</ProviderLabel>
        <ProviderInput 
          type="text" 
          placeholder={`Enter your ${type} wallet address`} 
          value={walletAddress} 
          onChange={(e) => handleChange(e)} 
        />
      </WalletInput>
      {walletAddress.length > 0 &&<ProviderBtn onClick={handleRequest}>Request withdraw</ProviderBtn> }
    </WalletProvider> 
  )
}

const WithdrawTrustCoinsPage = () => {
  const {coinrate, trustcoins, userdata} = UserAuth();
  const [error, setError] = useState(null)
  const [isNext, setisNext] = useState(false)

  const [isBitcoin, setisBitcoin] = useState(false)
  const [isEthereum, setisEthereum] = useState(false)
  const [isTron, setisTron] = useState(false)

  const [toWithdraw, setToWithdraw] = useState(null); //AMOUNT TO WITH DRAW
  const [walletAddress, setwalletAddress] = useState(null);
  const [walletType, setwalletType] = useState(null);

  const updateAddress = (address) => setwalletAddress(address)
  const updateWalletType = (type) => setwalletType(type)


  const usdAmountFunc = (rate, coins) => rate * coins

  const checkValidity = (reqAmount, rate, available) => {
    if(reqAmount > usdAmountFunc(rate, available)){
      setError("You cannot withdraw an amount larger than the available balance")
    } else return true
  }

  const handleChange = (e) => {
    if(checkValidity(e.target.value, coinrate, trustcoins.coins)) {
      if(!isNaN(e.target.value)){
        setError(null)
        setToWithdraw(e.target.value)
      }
    }
  }

  const handleNext = () => {
    setisNext(true)
  }

  const handleWalletSelect = (type) => {
      if(type === "bitcoin") {
        setisBitcoin(true);
        setisEthereum(false);
        setisTron(false);
      }
      if(type === "ethereum") {
        setisBitcoin(false);
        setisEthereum(true);
        setisTron(false);
      }
      if(type === "tron") {
        setisBitcoin(false);
          setisEthereum(false);
          setisTron(true);
      }
  }

  const handleProceed = () => {
    Navigate("confirm_withdraw", {
      state: {
        id: userdata,
        type_of_withdraw: "Alrican token",
        amount: toWithdraw,
        wallet_type: walletType,
        wallet_address: walletAddress,
        isServed: false,
      }
    })
  }
    
  if(!isNext) return (
        <WithDrawContainer>
          {trustcoins && <CircleDetailer tc={trustcoins.coins} usd={usdAmountFunc(trustcoins.coins, coinrate)} />}
          <MainTitle>Withdraw from your alrican tokens</MainTitle>
          {error && 
            <ErrorBox>
              <TiWarning size={25} />
              <ErrorText>{error}</ErrorText>
            </ErrorBox>
          }
          
          <InputContainer>
              <InputLabel>USD$</InputLabel>
              <Input placeholder='Amount to withdraw' onChange={(e) => handleChange(e)} value={toWithdraw} />
          </InputContainer>
          {/* { toWithdraw && <RequestBtn>Request withdraw</RequestBtn> } */}
          { toWithdraw && <RequestBtn onClick={handleNext}>Next</RequestBtn> }
        </WithDrawContainer>
    )
  
    if(isNext) return (
      <WalletDetailsBox>
        <MainTitle>Provide your crypto wallet address</MainTitle>

        <ChooseTitle>Choose your prefered wallet below</ChooseTitle>
        <WalletsBox>
          <WalletSelect active={isBitcoin} onClick={() => handleWalletSelect("bitcoin")}>Bitcoin</WalletSelect>
          <WholeWallet active={isBitcoin} type='bitcoin' proceedFunc={handleProceed} updateAddress={updateAddress} updateWalletType={updateWalletType} />
          <WalletSelect active={isEthereum} onClick={() => handleWalletSelect("ethereum")}>Ethereum</WalletSelect>
          <WholeWallet active={isEthereum} type='ethereum' proceedFunc={handleProceed} updateAddress={updateAddress} updateWalletType={updateWalletType} />
          <WalletSelect active={isTron} onClick={() => handleWalletSelect("tron")}>Tron</WalletSelect>
          <WholeWallet active={isTron} type='tron' proceedFunc={handleProceed} updateAddress={updateAddress} updateWalletType={updateWalletType} />
        </WalletsBox>
      </WalletDetailsBox>
    )
}



export const ChooseTitle = styled.p`
  margin: 0;
  margin-bottom: 5px;
  text-align: center;
`;
export const ProviderBtn = styled.button`
  border: none;
  background-color: ${colors.accent};
  padding: 8px;
  box-sizing: border-box;
  border-radius: 6px;
  color: ${colors.secondary};
  cursor: pointer;
  transition: all .25s ease-in-out;
  :hover {
    background-color: ${colors.accentShadow};
    color: #01050f;
  }
`;

export const WalletInput = styled.div`
  width: 100%;
`;

export const ProviderInput = styled.input`
  padding: 8px;
  width: 100%;
  border-radius: 6px;
  border: none;
  /* background-color: ${colors.accentShadow}; */
`;

export const ProviderLabel = styled.p`
  margin: 0;
  font-family: Roboto, sans-serif;
`;

export const WalletProvider = styled.div`
  /* display: ${props => props.active ? "flex":"none"}; */
  display: ${props => props.display};
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 15px;
  width: 100%;
`;

export const WalletDetailsBox = styled.div``;

export const WalletsBox = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
`;

export const WalletSelect = styled.button`
  width: 100%;
  padding: 12px;
  text-align: left;
  font-family: Roboto, sans-serif;
  cursor: pointer;
  transition: all .25s ease-in-out;
  background-color: ${props => props.active ? colors.accent: colors.accentShadow};
  color: ${props => props.active ? "#fff": "#01050f"};
  /* border: 2px solid ${colors.accentShadow}; */
  border: 2px solid transparent;
  :hover {
    border-color: ${colors.accent};
  }
`;

export const ErrorBox = styled.div`
    display: flex;
    align-items: center;
    background-color: ${colors.accentShadow};
    padding: 12px;
    border-radius: 6px;
    gap: 15px;
    color: ${colors.accent};
    margin: 15px 0 20px 0;
`;
export const ErrorText = styled.p`
    margin: 0;
`;

export const RequestBtn = styled.button`
  background-color: ${colors.accent};
  border: none;
  outline: none;
  padding: 12px;
  margin-top: 18px;
  color: #fff;
  font-family: Roboto, sans-serif;
  text-transform: uppercase;
  border-radius: 6px;
  cursor: pointer;
  transition: all .25s ease-in-out;
  :hover {
    background-color: ${colors.accentShadow};
    color: #01050f;
  }
`;
export const Input = styled.input`
  margin: 0;
  font-family: Roboto, sans-serif;
  font-size: 13px;
  padding: 12px;
  border: none;
  outline: none;
  background-color: rgba(192,192,192, .5);
  border-radius: 0 6px 6px 0;;
`;
export const InputLabel = styled.p`
  margin: 0;
  font-family: Roboto, sans-serif;
  font-size: 13px;
  background-color: rgba(192,192,192, .5);
  padding: 12px;
  border-radius: 6px 0 0 6px;
`;
export const InputContainer = styled.div`
  margin: 0;
  font-family: Roboto, sans-serif;
  display: flex;
  align-items: center;
`;
export const MainTitle = styled.p`
  margin: 30px 0 20px 0;
  font-family: Inter, sans-serif;
  font-weight: 700;
  text-transform: uppercase;
  color: #01050f;
  text-align: center;
`;
export const Value = styled.p`
  margin: 0;
  font-family: Roboto, sans-serif;
`;
export const Label = styled.p`
  margin: 0;
  text-transform: uppercase;
  font-family: Inter, sans-serif;
  font-weight: 600;
  margin-bottom: 8px;
  color: ${colors.accent};
`;
export const CircleDetailerContainer = styled.div`
  box-shadow: 1px 1px 8px rgba(192,192,192,0.3);
  background-color: #f5f5f5;
  width: 200px;
  height: 200px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
`;
export const WithDrawContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
`;

export default WithdrawTrustCoinsPage
